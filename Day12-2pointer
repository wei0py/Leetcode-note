# 双指针（2 Pointer）：

    基础知识：常见双指针算法分为三类，同向（即两个指针都相同一个方向移动），背向（两个指针从相同或者相邻的位置出发，背向移动直到其中一根指针到达边界为止），相向（两个指针从两边出发一起向中间移动直到两个指针相遇） 
   背向双指针：(基本上全是回文串的题)
        Leetcode 409. Longest Palindrome. 
        Leetcode 125. Valid Palindrome. 
        Leetcode 5. Longest Palindromic Substring. 
   相向双指针：(以two sum为基础的一系列题). 
        Leetcode 1. Two Sum (这里使用的是先排序的双指针算法，不同于hashmap做法). 
        Leetcode 167. Two Sum II - Input array is sorted. 
        Leetcode 15. 3Sum. 
        ```python
        class Solution:
            def threeSum(self, nums: List[int]) -> List[List[int]]:
                if (len(nums) <=2):
                    return []
                nums.sort()
                res = set()
                for i, v in enumerate(nums[:-2]):
                    if i >= 1 and v == nums[i-1]:
                        continue
                    d = {}
                    for x in nums[i+1:]:
                        if x not in d:
                            d[-v-x] = 1
                        else:
                            res.add((v, -v-x, x))
                return map(list, res)
        ```
        
        ```python
        def threeSum(self, nums: List[int]) -> List[List[int]]:

	res = set()

	#1. Split nums into three lists: negative numbers, positive numbers, and zeros
	n, p, z = [], [], []
	for num in nums:
		if num > 0:
			p.append(num)
		elif num < 0: 
			n.append(num)
		else:
			z.append(num)

	#2. Create a separate set for negatives and positives for O(1) look-up times
	N, P = set(n), set(p)

	#3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P
	#   i.e. (-3, 0, 3) = 0
	if z:
		for num in P:
			if -1*num in N:
				res.add((-1*num, 0, num))

	#3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0
	if len(z) >= 3:
		res.add((0,0,0))

	#4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)
	#   exists in the positive number set
	for i in range(len(n)):
		for j in range(i+1,len(n)):
			target = -1*(n[i]+n[j])
			if target in P:
				res.add(tuple(sorted([n[i],n[j],target])))

	#5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)
	#   exists in the negative number set
	for i in range(len(p)):
		for j in range(i+1,len(p)):
			target = -1*(p[i]+p[j])
			if target in N:
				res.add(tuple(sorted([p[i],p[j],target])))

	return res
        ```
        Leetcode 16. 3Sum Closest. 
        Leetcode 18. 4Sum. 
        Leetcode 454. 4Sum II. 
        Leetcode 277. Find the Celebrity. 
        Leetcode 11. Container With Most Water. 
        ```python
        class Solution:
        def maxArea(self, height: List[int]) -> int:
            i = 0;
            j = len(height) - 1
            if (i==j):
                return 0
            elif (j-i == 1):
                return (j - i) * min(height[i], height[j])
            maxV = 0
            while (i < j):
                maxV = max((j - i) * min(height[i], height[j]), maxV)
                if (height[i] < height[j]):
                    i += 1;
                elif (height[i] > height[j]):
                    j -= 1;
                else:
                    i += 1;
                    j -= 1;
            return maxV
        ```
    同向双指针：
        Leetcode 283. Move Zeroes
        Leetcode 26. Remove Duplicate Numbers in Array
        Leetcode 395. Longest Substring with At Least K Repeating Characters
        Leetcode 340. Longest Substring with At Most K Distinct Characters
        Leetcode 424. Longest Repeating Character Replacement
        Leetcode 76. Minimum Window Substring
        Leetcode 3. Longest Substring Without Repeating Characters
        Leetcode 1004 Max Consecutive Ones III
